/**
 * See https://www.hackerrank.com/challenges/ctci-ice-cream-parlor
 * The binary search is not required to solve this challenge
 * A HashTable would be more efficient
 * But the challenge requires to use binary search to solve it
 * So, for the sake of learning binary search, Let's do so.
 */
let Solution = (()=>{
    "use strict";
    function Solver(){}

    let sortIntegersInAscendingOrder = function(a, b){
        return a-b
    };


    Solver.prototype.getIndexOfValues = function(arr,val1,val2){
        let result = [];
        result[0] = arr.indexOf(val1);
        result[1] = arr.indexOf(val2);
        if(result[0] === result[1]){
            result[1] = arr.indexOf(val2,result[1]+1);
        }
        return result.sort(sortIntegersInAscendingOrder);
    };


    /**
     * Binary Search
     * Given an amount of money, will return two values
     * val1 and val2 being val1 + val2 = amount
     * @param item
     */
    Solver.prototype.binarySearch = function(array, amount){
        let idx = Math.floor(array.length/2);
        if(array.length === 1 ){
            return array[0] === amount ? array[0] : null;
        }else if(array[idx] === amount){
            return array[idx];
        }else if(array[idx] > amount){
            return this.binarySearch(array.slice(0,idx),amount);
        }else{
            return this.binarySearch(array.slice(idx),amount);
        }
    };


    Solver.prototype.solve = function(money,prices){
        let sortedPrices = prices.slice().sort(sortIntegersInAscendingOrder);
        let price1,price2;

        let increaseByOne = function(item){
            return item+1;
        }

        for(let i in prices){
            let diff = money - prices[i];
            if(diff > 0){
                price2 = this.binarySearch(sortedPrices,diff);
                if(price2 != null){
                    price1 = prices[i];
                    return this.getIndexOfValues(prices,price1,price2).map(increaseByOne).join(' ');
                }
            }
        }
    };

    return Solver;
})();

let s = new Solution();


console.log(s.solve(548, '869 515 901 944 572 995 903 372 651 429 942 658 853 494 747 449 357 736 319 566 9 166 799 27 75 28 166 760 240 673 243 592 389 893 128 257 722 839 534 871 896 301 682 865 70 228 173 351 192 225 278 405 498 100 595 727 577 755 890 426 154 795 243 818 713 64 750 120 974 346 187 199 400 343 768 739 43 761 746 306 144 896 511 488 410 409 679 614 135 536 582 522 700 875 870 271 509 17 201 492 217 669 802 847 103 480 494 184 785 729 341 429 974 853 259 57 554 133 973 666 759 51 267 192 458 747 649 103 513 314 149 859 106 865 48 359 685 314 803 629 931 187 776 314 10 319 635 437 623 762 2 755 136 15 178 967 248 88 645 747 410 392 678 443 628 780 992 640 634 160 482 713 971 592 389 432 124 522 204 15 74 162 64 477 250 736 255 606 475 387 403 374 217 836 395 987 680 374 740 31 905 1 842 371 994 62 861 479 551 996 669 100 282 573 482 387 29 192 206 804 260 366 559 954 717 477 551 666 933 213 572 294 217 354 245 419 319 295 760 540 328 615 738 514 512 338 960 330 198 840 706 140 621 55 227 468 79 633 977 362 681 494 31 416 865 353 325 360 805 847 425 870 868 776 515 173 43 608 501 970 861 658 430 532 2 573 738 854 802 162 937 262 282 426 640 775 198 269 248 419 94 600 977 240 175 11 227 989 387 880 743 689 587 950 541 199 160 698 88 294 259 257 173 806 516 201 794 38 832 924 606 257 333 494 848 553 225 765 710 911 160 374 563 249 45 103 19 2 67 391 741 230 681 475 855 267 646 865 440 514 312 725 678 82 371 787 468 814 306 452 53 801 785 604 46 577 336 805 251 265 429 526 48 94 9 154 747 348 560 163 449 332 750 240 670 555 689 534 718 840 541 328 551 467 872 238 94 554 255 160 515 206 201 374 999 739 332 407 792 716 306 414 40 611 934 475 332 761 120 783 860 435 746 362 304 568 937 682 843 689 609 235 255 990 748 749 769 657 222 809 224 228 882 357 889 217 316 239 230 429 598 325 650 985 359 622 572 274 498 98 763 230 680 362 339 530 103 984 389 27 407 75 752 985 221 912 866 52 429 339 230 900 983 437 572 798 522 642 879 724 457 685 838 183 509 725 694 706 614 611 758 765 193 446 97 867 576 376 723 522 959 649 28 449 461 357 534 405 766 890 765 825 585 960 658 163 972 592 470 560 414 566 267 79 814 359 638 513 480 368 262 112 9 816 62 354 144 944 21 468 301 390 296 618 204 482 784 752 162 933 485 31 106 609 766 535 944 504 94 903 397 380 462 931 74 771 797 728 272 883 832 290 160 915 304 76 306 302 929 192 575 903 572 526 954 163 651 522 383 333 267 923 275 464 432 425 106 883 540 120 235 482 185 501 637 261 783 325 192 689 720 905 832 598 330 51 770 974 705 425 464 597 641 426 812 642 796 656 43 135 860 322 924 647 791 477 422 887 874 814 814 25 600 422 960 891 749 166 774 440 449 784 552 85 559 419 94 479 966 526 250 526 233 988 387 650 809 615 262 192 397 551 217 561 206 660 683 24 255 306 735 637 892 540 5 306 793 511 624 312 977 674 48 387 17 830 271 464 999 245 426 591 429 994 429 561 338 618 833 198 788 881 51 97 715 975 902 75 557 633 455 260 587 990 693 51 330 961 405 92 756 485 778 845 74 398 40 429 170 208 513 334 578 727 802 457 429 124 957 237 515 487 155 959 821 411 549 443 711 208 211 889 540 506 233 338 513 62 908 17 425 922 74 239 374 117 650 760 839 743 467 518 747 38 409 479 557 338 383 166 765 809 703 25 754 567 932 237 580 248 2 629 745 144 855 684 345 85 751 731 357 2 501 864 864 290 312 630 400 479 482 715 522 38 301 588 558 175 265 820 146 282 677 235 661 443 925 535 372 907 290 624 372 507 683 996 135 332 721 569 850 657 374 683 850 728 439 703 534 357 245 219 769 994 149 376 554 70 784 742 646 896 768 689 540 248 400 770 130 160 855 808 949 136 131 29 848 485 743 358 103 552 607 371 124 789 164 501 623 562 198 64 432 947 257 881 810 170 193 112 890 578 974 185 811 374 470 817 437 302 560 574 920 187 471 565 745 94 530 666 639 457 128 778 724 554 845 490 366 661 596 652 678 341 456 615 74 830 400 897 532 580 835 960 376 687 487 597 106 446 925 366 171 1 452 192 726 998 25 988 853 754 1 762 397 346 741 183 659 921 627 994 975 966 328 962 325 557 453 962 419 911 233 855 570 387 10 817 487 11 665 660 641 459 588 358 583 467 583 748 624 996 40 568 135 193 489 243 797 368 249 160 774 993 464 437 704 667 797 85 736 827 175 966 670 348 724 698 341 27 964 357 609 935 249 742 67 526 795 312 814 133 844 358 368 745 895 784 516 660 312 963 903 374 307 504 940 980 206 74 686 901 167 798 51 485 3 79 634 457 556 540 387 94 409 107 831 724 221 444 838 824 511 874 563 217 819 482 522 367 617 20 498 864 542 275 720 1 471 639 506 498 235 312 351 958 961 38 421 511 906 534 268 248 144 319 152 372 700 438 470 640 372 24 555 343 330 9 351 858 640 482 432 902 570 817 64 506 121 462 753 658 255 79 792 341 292 869 877 259 251 516 550 735 439 977 860 752 817 977 343 864 366 351 909 38 74 284 906 219 366 146 830 554 874 700 467 571 476 142 676 480 788 387 240 114 38 896 805 339 284 319 341 970 587 653 362 920 911 723 124 507 752 405 700 792 509 224 317 374 25 15 841 514 540 70 237 64 492 779 929 730 485 23 292 268 998 52 27 407 763 426 685 526 391 707 368 942 688 959 793 117 677 487 684 742 862 243 620 886 861 57 767 507 522 983 260'.split(' ').map(Number)));

return;


var input = require("fs")
    .readFileSync("./tests/binary_search_ice_cream_parlor_test_1.txt", "utf-8")
    .split("\n");

var results = require("fs")
    .readFileSync("./tests/binary_search_ice_cream_parlor_test_1_results.txt", "utf-8")
    .split("\n");

let i2 = 0;
for(let i=1; i<input.length; i+=3){
    let money = Number(input[i]);
    let pricesArr = input[i+2].split(' ').map(Number);
    let solution = s.solve(money,pricesArr);
    console.log(money);
    console.log(input[i+2]);
    console.log(solution);
    console.assert(solution == results[i2], solution+' != '+results[i2]);
    i2++;
}

